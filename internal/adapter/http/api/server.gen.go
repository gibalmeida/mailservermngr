// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/gibalmeida/mailservermngr/internal/adapter/http/api/model"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all email accounts
	// (GET /accounts)
	GetAccounts(ctx echo.Context) error
	// Add a new email account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Change account password
	// (POST /accounts/changePassword)
	UpdateAccountPassword(ctx echo.Context) error
	// List of email accounts for a domain
	// (GET /accounts/filterByDomain/{domain})
	GetAccountsByDomain(ctx echo.Context, domain string) error
	// Remove an email account
	// (DELETE /accounts/{emailAddress})
	DeleteAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get data from an email account
	// (GET /accounts/{emailAddress})
	GetAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get all email aliases
	// (GET /addresses-aliases)
	GetAddressAliases(ctx echo.Context) error
	// Create an email alias
	// (POST /addresses-aliases)
	CreateAddressAlias(ctx echo.Context) error
	// Get all email aliases
	// (GET /addresses-aliases/filterByDomain/{domain})
	GetAddressAliasesByDomain(ctx echo.Context, domain string) error
	// Deletes an email alias
	// (DELETE /addresses-aliases/{alias})
	DeleteAddressAlias(ctx echo.Context, alias string) error
	// Update an email alias
	// (PUT /addresses-aliases/{alias})
	UpdateAddressAlias(ctx echo.Context, alias string) error
	// Get all email server domains
	// (GET /domains)
	GetDomains(ctx echo.Context) error
	// Add a new domain to the server
	// (POST /domains)
	CreateDomain(ctx echo.Context) error
	// List of domain aliases
	// (GET /domains-aliases)
	GetDomainsAliases(ctx echo.Context) error
	// Adds a new domain alias
	// (POST /domains-aliases)
	CreateDomainAlias(ctx echo.Context) error
	// Get Domains Aliases filtered by Domain
	// (GET /domains-aliases/filterByDomain/{domain})
	GetDomainsAliasesByDomain(ctx echo.Context, domain string) error
	// Deletes a domain alias
	// (DELETE /domains-aliases/{domain_alias})
	DeleteDomainAlias(ctx echo.Context, domainAlias string) error
	// Delete a domain
	// (DELETE /domains/{domain})
	DeleteDomain(ctx echo.Context, domain string) error
	// User Authentication
	// (POST /getToken)
	GetToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccounts(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// UpdateAccountPassword converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccountPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAccountPassword(ctx)
	return err
}

// GetAccountsByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountsByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountsByDomain(ctx, domain)
	return err
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccount(ctx, emailAddress)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccount(ctx, emailAddress)
	return err
}

// GetAddressAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliases(ctx)
	return err
}

// CreateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAddressAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAddressAlias(ctx)
	return err
}

// GetAddressAliasesByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliasesByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliasesByDomain(ctx, domain)
	return err
}

// DeleteAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAddressAlias(ctx, alias)
	return err
}

// UpdateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAddressAlias(ctx, alias)
	return err
}

// GetDomains converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomains(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomains(ctx)
	return err
}

// CreateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomain(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomain(ctx)
	return err
}

// GetDomainsAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainsAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomainsAliases(ctx)
	return err
}

// CreateDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomainAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomainAlias(ctx)
	return err
}

// GetDomainsAliasesByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainsAliasesByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomainsAliasesByDomain(ctx, domain)
	return err
}

// DeleteDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomainAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain_alias" -------------
	var domainAlias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain_alias", runtime.ParamLocationPath, ctx.Param("domain_alias"), &domainAlias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain_alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomainAlias(ctx, domainAlias)
	return err
}

// DeleteDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomain(ctx, domain)
	return err
}

// GetToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/accounts/changePassword", wrapper.UpdateAccountPassword)
	router.GET(baseURL+"/accounts/filterByDomain/:domain", wrapper.GetAccountsByDomain)
	router.DELETE(baseURL+"/accounts/:emailAddress", wrapper.DeleteAccount)
	router.GET(baseURL+"/accounts/:emailAddress", wrapper.GetAccount)
	router.GET(baseURL+"/addresses-aliases", wrapper.GetAddressAliases)
	router.POST(baseURL+"/addresses-aliases", wrapper.CreateAddressAlias)
	router.GET(baseURL+"/addresses-aliases/filterByDomain/:domain", wrapper.GetAddressAliasesByDomain)
	router.DELETE(baseURL+"/addresses-aliases/:alias", wrapper.DeleteAddressAlias)
	router.PUT(baseURL+"/addresses-aliases/:alias", wrapper.UpdateAddressAlias)
	router.GET(baseURL+"/domains", wrapper.GetDomains)
	router.POST(baseURL+"/domains", wrapper.CreateDomain)
	router.GET(baseURL+"/domains-aliases", wrapper.GetDomainsAliases)
	router.POST(baseURL+"/domains-aliases", wrapper.CreateDomainAlias)
	router.GET(baseURL+"/domains-aliases/filterByDomain/:domain", wrapper.GetDomainsAliasesByDomain)
	router.DELETE(baseURL+"/domains-aliases/:domain_alias", wrapper.DeleteDomainAlias)
	router.DELETE(baseURL+"/domains/:domain", wrapper.DeleteDomain)
	router.POST(baseURL+"/getToken", wrapper.GetToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/gibalmeida/mailservermngr/internal/adapter/http/api/model"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all email accounts
	// (GET /accounts)
	GetAccounts(ctx echo.Context) error
	// Add a new email account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Change account password
	// (POST /accounts/changePassword)
	UpdateAccountPassword(ctx echo.Context) error
	// List of email accounts for a domain
	// (GET /accounts/filterByDomain/{domain})
	GetAccountsByDomain(ctx echo.Context, domain string) error
	// Remove an email account
	// (DELETE /accounts/{emailAddress})
	DeleteAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get data from an email account
	// (GET /accounts/{emailAddress})
	GetAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get all email aliases
	// (GET /addresses-aliases)
	GetAddressAliases(ctx echo.Context) error
	// Create an email alias
	// (POST /addresses-aliases)
	CreateAddressAlias(ctx echo.Context) error
	// Get all email aliases
	// (GET /addresses-aliases/filterByDomain/{domain})
	GetAddressAliasesByDomain(ctx echo.Context, domain string) error
	// Deletes an email alias
	// (DELETE /addresses-aliases/{alias})
	DeleteAddressAlias(ctx echo.Context, alias string) error
	// Update an email alias
	// (PUT /addresses-aliases/{alias})
	UpdateAddressAlias(ctx echo.Context, alias string) error
	// Get all email server domains
	// (GET /domains)
	GetDomains(ctx echo.Context) error
	// Add a new domain to the server
	// (POST /domains)
	CreateDomain(ctx echo.Context) error
	// List of domain aliases
	// (GET /domains-aliases)
	GetDomainsAliases(ctx echo.Context) error
	// Adds a new domain alias
	// (POST /domains-aliases)
	CreateDomainAlias(ctx echo.Context) error
	// Get Domains Aliases filtered by Domain
	// (GET /domains-aliases/filterByDomain/{domain})
	GetDomainsAliasesByDomain(ctx echo.Context, domain string) error
	// Deletes a domain alias
	// (DELETE /domains-aliases/{domain_alias})
	DeleteDomainAlias(ctx echo.Context, domainAlias string) error
	// Delete a domain
	// (DELETE /domains/{domain})
	DeleteDomain(ctx echo.Context, domain string) error
	// User Authentication
	// (POST /getToken)
	GetToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccounts(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// UpdateAccountPassword converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccountPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAccountPassword(ctx)
	return err
}

// GetAccountsByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountsByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountsByDomain(ctx, domain)
	return err
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccount(ctx, emailAddress)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccount(ctx, emailAddress)
	return err
}

// GetAddressAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliases(ctx)
	return err
}

// CreateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAddressAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAddressAlias(ctx)
	return err
}

// GetAddressAliasesByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliasesByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliasesByDomain(ctx, domain)
	return err
}

// DeleteAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAddressAlias(ctx, alias)
	return err
}

// UpdateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAddressAlias(ctx, alias)
	return err
}

// GetDomains converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomains(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomains(ctx)
	return err
}

// CreateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomain(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomain(ctx)
	return err
}

// GetDomainsAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainsAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomainsAliases(ctx)
	return err
}

// CreateDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomainAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomainAlias(ctx)
	return err
}

// GetDomainsAliasesByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainsAliasesByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomainsAliasesByDomain(ctx, domain)
	return err
}

// DeleteDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomainAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain_alias" -------------
	var domainAlias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain_alias", runtime.ParamLocationPath, ctx.Param("domain_alias"), &domainAlias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain_alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomainAlias(ctx, domainAlias)
	return err
}

// DeleteDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomain(ctx, domain)
	return err
}

// GetToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/accounts/changePassword", wrapper.UpdateAccountPassword)
	router.GET(baseURL+"/accounts/filterByDomain/:domain", wrapper.GetAccountsByDomain)
	router.DELETE(baseURL+"/accounts/:emailAddress", wrapper.DeleteAccount)
	router.GET(baseURL+"/accounts/:emailAddress", wrapper.GetAccount)
	router.GET(baseURL+"/addresses-aliases", wrapper.GetAddressAliases)
	router.POST(baseURL+"/addresses-aliases", wrapper.CreateAddressAlias)
	router.GET(baseURL+"/addresses-aliases/filterByDomain/:domain", wrapper.GetAddressAliasesByDomain)
	router.DELETE(baseURL+"/addresses-aliases/:alias", wrapper.DeleteAddressAlias)
	router.PUT(baseURL+"/addresses-aliases/:alias", wrapper.UpdateAddressAlias)
	router.GET(baseURL+"/domains", wrapper.GetDomains)
	router.POST(baseURL+"/domains", wrapper.CreateDomain)
	router.GET(baseURL+"/domains-aliases", wrapper.GetDomainsAliases)
	router.POST(baseURL+"/domains-aliases", wrapper.CreateDomainAlias)
	router.GET(baseURL+"/domains-aliases/filterByDomain/:domain", wrapper.GetDomainsAliasesByDomain)
	router.DELETE(baseURL+"/domains-aliases/:domain_alias", wrapper.DeleteDomainAlias)
	router.DELETE(baseURL+"/domains/:domain", wrapper.DeleteDomain)
	router.POST(baseURL+"/getToken", wrapper.GetToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/gibalmeida/mailservermngr/internal/adapter/http/api/model"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all email accounts
	// (GET /accounts)
	GetAccounts(ctx echo.Context) error
	// Add a new email account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Change account password
	// (POST /accounts/changePassword)
	UpdateAccountPassword(ctx echo.Context) error
	// List of email accounts for a domain
	// (GET /accounts/filterByDomain/{domain})
	GetAccountsByDomain(ctx echo.Context, domain string) error
	// Remove an email account
	// (DELETE /accounts/{emailAddress})
	DeleteAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get data from an email account
	// (GET /accounts/{emailAddress})
	GetAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get all email aliases
	// (GET /addresses-aliases)
	GetAddressAliases(ctx echo.Context) error
	// Create an email alias
	// (POST /addresses-aliases)
	CreateAddressAlias(ctx echo.Context) error
	// Get all email aliases
	// (GET /addresses-aliases/filterByDomain/{domain})
	GetAddressAliasesByDomain(ctx echo.Context, domain string) error
	// Deletes an email alias
	// (DELETE /addresses-aliases/{alias})
	DeleteAddressAlias(ctx echo.Context, alias string) error
	// Update an email alias
	// (PUT /addresses-aliases/{alias})
	UpdateAddressAlias(ctx echo.Context, alias string) error
	// Get all email server domains
	// (GET /domains)
	GetDomains(ctx echo.Context) error
	// Add a new domain to the server
	// (POST /domains)
	CreateDomain(ctx echo.Context) error
	// List of domain aliases
	// (GET /domains-aliases)
	GetDomainsAliases(ctx echo.Context) error
	// Adds a new domain alias
	// (POST /domains-aliases)
	CreateDomainAlias(ctx echo.Context) error
	// Deletes a domain alias
	// (DELETE /domains-aliases/{domain_alias})
	DeleteDomainAlias(ctx echo.Context, domainAlias string) error
	// Delete a domain
	// (DELETE /domains/{domain})
	DeleteDomain(ctx echo.Context, domain string) error
	// User Authentication
	// (POST /getToken)
	GetToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccounts(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// UpdateAccountPassword converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccountPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAccountPassword(ctx)
	return err
}

// GetAccountsByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountsByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountsByDomain(ctx, domain)
	return err
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccount(ctx, emailAddress)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccount(ctx, emailAddress)
	return err
}

// GetAddressAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliases(ctx)
	return err
}

// CreateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAddressAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAddressAlias(ctx)
	return err
}

// GetAddressAliasesByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliasesByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliasesByDomain(ctx, domain)
	return err
}

// DeleteAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAddressAlias(ctx, alias)
	return err
}

// UpdateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAddressAlias(ctx, alias)
	return err
}

// GetDomains converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomains(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomains(ctx)
	return err
}

// CreateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomain(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomain(ctx)
	return err
}

// GetDomainsAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainsAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomainsAliases(ctx)
	return err
}

// CreateDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomainAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomainAlias(ctx)
	return err
}

// DeleteDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomainAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain_alias" -------------
	var domainAlias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain_alias", runtime.ParamLocationPath, ctx.Param("domain_alias"), &domainAlias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain_alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomainAlias(ctx, domainAlias)
	return err
}

// DeleteDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomain(ctx, domain)
	return err
}

// GetToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/accounts/changePassword", wrapper.UpdateAccountPassword)
	router.GET(baseURL+"/accounts/filterByDomain/:domain", wrapper.GetAccountsByDomain)
	router.DELETE(baseURL+"/accounts/:emailAddress", wrapper.DeleteAccount)
	router.GET(baseURL+"/accounts/:emailAddress", wrapper.GetAccount)
	router.GET(baseURL+"/addresses-aliases", wrapper.GetAddressAliases)
	router.POST(baseURL+"/addresses-aliases", wrapper.CreateAddressAlias)
	router.GET(baseURL+"/addresses-aliases/filterByDomain/:domain", wrapper.GetAddressAliasesByDomain)
	router.DELETE(baseURL+"/addresses-aliases/:alias", wrapper.DeleteAddressAlias)
	router.PUT(baseURL+"/addresses-aliases/:alias", wrapper.UpdateAddressAlias)
	router.GET(baseURL+"/domains", wrapper.GetDomains)
	router.POST(baseURL+"/domains", wrapper.CreateDomain)
	router.GET(baseURL+"/domains-aliases", wrapper.GetDomainsAliases)
	router.POST(baseURL+"/domains-aliases", wrapper.CreateDomainAlias)
	router.DELETE(baseURL+"/domains-aliases/:domain_alias", wrapper.DeleteDomainAlias)
	router.DELETE(baseURL+"/domains/:domain", wrapper.DeleteDomain)
	router.POST(baseURL+"/getToken", wrapper.GetToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/gibalmeida/mailservermngr/internal/adapter/http/api/model"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all email accounts
	// (GET /accounts)
	GetAccounts(ctx echo.Context) error
	// Add a new email account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Change account password
	// (POST /accounts/changePassword)
	UpdateAccountPassword(ctx echo.Context) error
	// List of email accounts for a domain
	// (GET /accounts/filterByDomain/{domain})
	GetAccountsByDomain(ctx echo.Context, domain string) error
	// Remove an email account
	// (DELETE /accounts/{emailAddress})
	DeleteAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get data from an email account
	// (GET /accounts/{emailAddress})
	GetAccount(ctx echo.Context, emailAddress EmailAddress) error
	// Get all email aliases
	// (GET /addresses-aliases)
	GetAddressAliases(ctx echo.Context) error
	// Create an email alias
	// (POST /addresses-aliases)
	CreateAddressAlias(ctx echo.Context) error
	// Get all email aliases
	// (GET /addresses-aliases/filterByDomain/{domain})
	GetAddressAliasesByDomain(ctx echo.Context, domain string) error
	// Deletes an email alias
	// (DELETE /addresses-aliases/{alias})
	DeleteAddressAlias(ctx echo.Context, alias string) error
	// Update an email alias
	// (PUT /addresses-aliases/{alias})
	UpdateAddressAlias(ctx echo.Context, alias string) error
	// Get all email server domains
	// (GET /domains)
	GetDomains(ctx echo.Context) error
	// Add a new domain to the server
	// (POST /domains)
	CreateDomain(ctx echo.Context) error
	// List of domain aliases
	// (GET /domains-aliases)
	GetDomainsAliases(ctx echo.Context) error
	// Adds a new domain alias
	// (POST /domains-aliases)
	CreateDomainAlias(ctx echo.Context) error
	// Deletes a domain alias
	// (DELETE /domains-aliases/{domain_alias})
	DeleteDomainAlias(ctx echo.Context, domainAlias string) error
	// Delete a domain
	// (DELETE /domains/{domain})
	DeleteDomain(ctx echo.Context, domain string) error
	// User Authentication
	// (POST /getToken)
	GetToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccounts(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// UpdateAccountPassword converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccountPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAccountPassword(ctx)
	return err
}

// GetAccountsByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountsByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountsByDomain(ctx, domain)
	return err
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccount(ctx, emailAddress)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emailAddress" -------------
	var emailAddress EmailAddress

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddress", runtime.ParamLocationPath, ctx.Param("emailAddress"), &emailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccount(ctx, emailAddress)
	return err
}

// GetAddressAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliases(ctx)
	return err
}

// CreateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAddressAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAddressAlias(ctx)
	return err
}

// GetAddressAliasesByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressAliasesByDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressAliasesByDomain(ctx, domain)
	return err
}

// DeleteAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAddressAlias(ctx, alias)
	return err
}

// UpdateAddressAlias converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAddressAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAddressAlias(ctx, alias)
	return err
}

// GetDomains converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomains(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomains(ctx)
	return err
}

// CreateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomain(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomain(ctx)
	return err
}

// GetDomainsAliases converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainsAliases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDomainsAliases(ctx)
	return err
}

// CreateDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomainAlias(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDomainAlias(ctx)
	return err
}

// DeleteDomainAlias converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomainAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain_alias" -------------
	var domainAlias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain_alias", runtime.ParamLocationPath, ctx.Param("domain_alias"), &domainAlias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain_alias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomainAlias(ctx, domainAlias)
	return err
}

// DeleteDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, ctx.Param("domain"), &domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDomain(ctx, domain)
	return err
}

// GetToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/accounts/changePassword", wrapper.UpdateAccountPassword)
	router.GET(baseURL+"/accounts/filterByDomain/:domain", wrapper.GetAccountsByDomain)
	router.DELETE(baseURL+"/accounts/:emailAddress", wrapper.DeleteAccount)
	router.GET(baseURL+"/accounts/:emailAddress", wrapper.GetAccount)
	router.GET(baseURL+"/addresses-aliases", wrapper.GetAddressAliases)
	router.POST(baseURL+"/addresses-aliases", wrapper.CreateAddressAlias)
	router.GET(baseURL+"/addresses-aliases/filterByDomain/:domain", wrapper.GetAddressAliasesByDomain)
	router.DELETE(baseURL+"/addresses-aliases/:alias", wrapper.DeleteAddressAlias)
	router.PUT(baseURL+"/addresses-aliases/:alias", wrapper.UpdateAddressAlias)
	router.GET(baseURL+"/domains", wrapper.GetDomains)
	router.POST(baseURL+"/domains", wrapper.CreateDomain)
	router.GET(baseURL+"/domains-aliases", wrapper.GetDomainsAliases)
	router.POST(baseURL+"/domains-aliases", wrapper.CreateDomainAlias)
	router.DELETE(baseURL+"/domains-aliases/:domain_alias", wrapper.DeleteDomainAlias)
	router.DELETE(baseURL+"/domains/:domain", wrapper.DeleteDomain)
	router.POST(baseURL+"/getToken", wrapper.GetToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

/* tslint:disable */
/* eslint-disable */
/**
 * Mail Server Manager API
 * This is an API specification used to manager a database that is used by an Exim4 server as your accounts and domains.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gibalmeida@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'domain': string;
}
/**
 * 
 * @export
 * @interface AddressAlias
 */
export interface AddressAlias {
    /**
     * 
     * @type {string}
     * @memberof AddressAlias
     */
    'alias': string;
    /**
     * 
     * @type {string}
     * @memberof AddressAlias
     */
    'addresses': string;
}
/**
 * Authentication credentials
 * @export
 * @interface Auth
 */
export interface Auth {
    /**
     * 
     * @type {string}
     * @memberof Auth
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Auth
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ChangeAccountPassword
 */
export interface ChangeAccountPassword {
    /**
     * 
     * @type {string}
     * @memberof ChangeAccountPassword
     */
    'emailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof ChangeAccountPassword
     */
    'newPassword': string;
}
/**
 * Domain of an email address (e.g. @example.com)
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * Dom√≠nio
     * @type {string}
     * @memberof Domain
     */
    'domain': string;
}
/**
 * Alias for an email domain (e.g. @example.net)
 * @export
 * @interface DomainAlias
 */
export interface DomainAlias {
    /**
     * 
     * @type {string}
     * @memberof DomainAlias
     */
    'alias': string;
    /**
     * 
     * @type {string}
     * @memberof DomainAlias
     */
    'domain': string;
}
/**
 * JWT Access Token
 * @export
 * @interface GetTokenResponse
 */
export interface GetTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof GetTokenResponse
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error code
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NewAccount
 */
export interface NewAccount {
    /**
     * 
     * @type {string}
     * @memberof NewAccount
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NewAccount
     */
    'domain': string;
    /**
     * 
     * @type {string}
     * @memberof NewAccount
     */
    'password': string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new email address to the email server
         * @summary Add a new email account
         * @param {NewAccount} newAccount Create a new email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (newAccount: NewAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newAccount' is not null or undefined
            assertParamExists('createAccount', 'newAccount', newAccount)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newAccount, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an email account from the email server
         * @summary Remove an email account
         * @param {string} emailAddress Email address that should be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (emailAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailAddress' is not null or undefined
            assertParamExists('deleteAccount', 'emailAddress', emailAddress)
            const localVarPath = `/accounts/{emailAddress}`
                .replace(`{${"emailAddress"}}`, encodeURIComponent(String(emailAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data relating to an email account
         * @summary Get data from an email account
         * @param {string} emailAddress Email address to obtain account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (emailAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailAddress' is not null or undefined
            assertParamExists('getAccount', 'emailAddress', emailAddress)
            const localVarPath = `/accounts/{emailAddress}`
                .replace(`{${"emailAddress"}}`, encodeURIComponent(String(emailAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all email accounts that are registered on the email server.
         * @summary Get a list of all email accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all email accounts for a given domain
         * @summary List of email accounts for a domain
         * @param {string} domain Domain for which we want the list of email accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsByDomain: async (domain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('getAccountsByDomain', 'domain', domain)
            const localVarPath = `/accounts/filterByDomain/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change account password
         * @param {ChangeAccountPassword} changeAccountPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountPassword: async (changeAccountPassword: ChangeAccountPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeAccountPassword' is not null or undefined
            assertParamExists('updateAccountPassword', 'changeAccountPassword', changeAccountPassword)
            const localVarPath = `/accounts/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeAccountPassword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new email address to the email server
         * @summary Add a new email account
         * @param {NewAccount} newAccount Create a new email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(newAccount: NewAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(newAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an email account from the email server
         * @summary Remove an email account
         * @param {string} emailAddress Email address that should be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(emailAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(emailAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data relating to an email account
         * @summary Get data from an email account
         * @param {string} emailAddress Email address to obtain account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(emailAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(emailAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all email accounts that are registered on the email server.
         * @summary Get a list of all email accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccounts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccounts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all email accounts for a given domain
         * @summary List of email accounts for a domain
         * @param {string} domain Domain for which we want the list of email accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsByDomain(domain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsByDomain(domain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change account password
         * @param {ChangeAccountPassword} changeAccountPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountPassword(changeAccountPassword: ChangeAccountPassword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountPassword(changeAccountPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Add a new email address to the email server
         * @summary Add a new email account
         * @param {NewAccount} newAccount Create a new email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(newAccount: NewAccount, options?: any): AxiosPromise<NewAccount> {
            return localVarFp.createAccount(newAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an email account from the email server
         * @summary Remove an email account
         * @param {string} emailAddress Email address that should be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(emailAddress: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAccount(emailAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns data relating to an email account
         * @summary Get data from an email account
         * @param {string} emailAddress Email address to obtain account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(emailAddress: string, options?: any): AxiosPromise<Account> {
            return localVarFp.getAccount(emailAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all email accounts that are registered on the email server.
         * @summary Get a list of all email accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts(options?: any): AxiosPromise<Array<Account>> {
            return localVarFp.getAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all email accounts for a given domain
         * @summary List of email accounts for a domain
         * @param {string} domain Domain for which we want the list of email accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsByDomain(domain: string, options?: any): AxiosPromise<Array<Account>> {
            return localVarFp.getAccountsByDomain(domain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change account password
         * @param {ChangeAccountPassword} changeAccountPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountPassword(changeAccountPassword: ChangeAccountPassword, options?: any): AxiosPromise<void> {
            return localVarFp.updateAccountPassword(changeAccountPassword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Add a new email address to the email server
     * @summary Add a new email account
     * @param {NewAccount} newAccount Create a new email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public createAccount(newAccount: NewAccount, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).createAccount(newAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an email account from the email server
     * @summary Remove an email account
     * @param {string} emailAddress Email address that should be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public deleteAccount(emailAddress: string, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).deleteAccount(emailAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data relating to an email account
     * @summary Get data from an email account
     * @param {string} emailAddress Email address to obtain account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccount(emailAddress: string, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccount(emailAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all email accounts that are registered on the email server.
     * @summary Get a list of all email accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccounts(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all email accounts for a given domain
     * @summary List of email accounts for a domain
     * @param {string} domain Domain for which we want the list of email accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccountsByDomain(domain: string, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccountsByDomain(domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change account password
     * @param {ChangeAccountPassword} changeAccountPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public updateAccountPassword(changeAccountPassword: ChangeAccountPassword, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).updateAccountPassword(changeAccountPassword, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AddressesAliasesApi - axios parameter creator
 * @export
 */
export const AddressesAliasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new email alias
         * @summary Create an email alias
         * @param {AddressAlias} addressAlias Adds a new email alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddressAlias: async (addressAlias: AddressAlias, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressAlias' is not null or undefined
            assertParamExists('createAddressAlias', 'addressAlias', addressAlias)
            const localVarPath = `/addresses-aliases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressAlias, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an email alias from the email server
         * @summary Deletes an email alias
         * @param {string} alias Email alias to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddressAlias: async (alias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alias' is not null or undefined
            assertParamExists('deleteAddressAlias', 'alias', alias)
            const localVarPath = `/addresses-aliases/{alias}`
                .replace(`{${"alias"}}`, encodeURIComponent(String(alias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all email aliases registered on the email server.
         * @summary Get all email aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAliases: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/addresses-aliases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all email aliases registered on the email server.
         * @summary Get all email aliases
         * @param {string} domain Domain by which you want to filter the list of email aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAliasesByDomain: async (domain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('getAddressAliasesByDomain', 'domain', domain)
            const localVarPath = `/addresses-aliases/filterByDomain/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates data for an email alias
         * @summary Update an email alias
         * @param {string} alias Email alias
         * @param {AddressAlias} addressAlias Change your email alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressAlias: async (alias: string, addressAlias: AddressAlias, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alias' is not null or undefined
            assertParamExists('updateAddressAlias', 'alias', alias)
            // verify required parameter 'addressAlias' is not null or undefined
            assertParamExists('updateAddressAlias', 'addressAlias', addressAlias)
            const localVarPath = `/addresses-aliases/{alias}`
                .replace(`{${"alias"}}`, encodeURIComponent(String(alias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressAlias, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressesAliasesApi - functional programming interface
 * @export
 */
export const AddressesAliasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressesAliasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new email alias
         * @summary Create an email alias
         * @param {AddressAlias} addressAlias Adds a new email alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAddressAlias(addressAlias: AddressAlias, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressAlias>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAddressAlias(addressAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an email alias from the email server
         * @summary Deletes an email alias
         * @param {string} alias Email alias to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAddressAlias(alias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAddressAlias(alias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all email aliases registered on the email server.
         * @summary Get all email aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressAliases(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressAlias>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressAliases(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all email aliases registered on the email server.
         * @summary Get all email aliases
         * @param {string} domain Domain by which you want to filter the list of email aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressAliasesByDomain(domain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressAlias>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressAliasesByDomain(domain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates data for an email alias
         * @summary Update an email alias
         * @param {string} alias Email alias
         * @param {AddressAlias} addressAlias Change your email alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddressAlias(alias: string, addressAlias: AddressAlias, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressAlias>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddressAlias(alias, addressAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressesAliasesApi - factory interface
 * @export
 */
export const AddressesAliasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressesAliasesApiFp(configuration)
    return {
        /**
         * Adds a new email alias
         * @summary Create an email alias
         * @param {AddressAlias} addressAlias Adds a new email alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddressAlias(addressAlias: AddressAlias, options?: any): AxiosPromise<AddressAlias> {
            return localVarFp.createAddressAlias(addressAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an email alias from the email server
         * @summary Deletes an email alias
         * @param {string} alias Email alias to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddressAlias(alias: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAddressAlias(alias, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all email aliases registered on the email server.
         * @summary Get all email aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAliases(options?: any): AxiosPromise<Array<AddressAlias>> {
            return localVarFp.getAddressAliases(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all email aliases registered on the email server.
         * @summary Get all email aliases
         * @param {string} domain Domain by which you want to filter the list of email aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAliasesByDomain(domain: string, options?: any): AxiosPromise<Array<AddressAlias>> {
            return localVarFp.getAddressAliasesByDomain(domain, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates data for an email alias
         * @summary Update an email alias
         * @param {string} alias Email alias
         * @param {AddressAlias} addressAlias Change your email alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressAlias(alias: string, addressAlias: AddressAlias, options?: any): AxiosPromise<AddressAlias> {
            return localVarFp.updateAddressAlias(alias, addressAlias, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressesAliasesApi - object-oriented interface
 * @export
 * @class AddressesAliasesApi
 * @extends {BaseAPI}
 */
export class AddressesAliasesApi extends BaseAPI {
    /**
     * Adds a new email alias
     * @summary Create an email alias
     * @param {AddressAlias} addressAlias Adds a new email alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesAliasesApi
     */
    public createAddressAlias(addressAlias: AddressAlias, options?: AxiosRequestConfig) {
        return AddressesAliasesApiFp(this.configuration).createAddressAlias(addressAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an email alias from the email server
     * @summary Deletes an email alias
     * @param {string} alias Email alias to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesAliasesApi
     */
    public deleteAddressAlias(alias: string, options?: AxiosRequestConfig) {
        return AddressesAliasesApiFp(this.configuration).deleteAddressAlias(alias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all email aliases registered on the email server.
     * @summary Get all email aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesAliasesApi
     */
    public getAddressAliases(options?: AxiosRequestConfig) {
        return AddressesAliasesApiFp(this.configuration).getAddressAliases(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all email aliases registered on the email server.
     * @summary Get all email aliases
     * @param {string} domain Domain by which you want to filter the list of email aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesAliasesApi
     */
    public getAddressAliasesByDomain(domain: string, options?: AxiosRequestConfig) {
        return AddressesAliasesApiFp(this.configuration).getAddressAliasesByDomain(domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates data for an email alias
     * @summary Update an email alias
     * @param {string} alias Email alias
     * @param {AddressAlias} addressAlias Change your email alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesAliasesApi
     */
    public updateAddressAlias(alias: string, addressAlias: AddressAlias, options?: AxiosRequestConfig) {
        return AddressesAliasesApiFp(this.configuration).updateAddressAlias(alias, addressAlias, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Obtains a JWT access token for calling this service\'s APIs
         * @summary User Authentication
         * @param {Auth} auth Access credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken: async (auth: Auth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auth' is not null or undefined
            assertParamExists('getToken', 'auth', auth)
            const localVarPath = `/getToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(auth, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Obtains a JWT access token for calling this service\'s APIs
         * @summary User Authentication
         * @param {Auth} auth Access credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToken(auth: Auth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToken(auth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Obtains a JWT access token for calling this service\'s APIs
         * @summary User Authentication
         * @param {Auth} auth Access credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken(auth: Auth, options?: any): AxiosPromise<GetTokenResponse> {
            return localVarFp.getToken(auth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Obtains a JWT access token for calling this service\'s APIs
     * @summary User Authentication
     * @param {Auth} auth Access credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getToken(auth: Auth, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getToken(auth, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DomainsApi - axios parameter creator
 * @export
 */
export const DomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new domain to the email server
         * @summary Add a new domain to the server
         * @param {Domain} domain Create a new domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain: async (domain: Domain, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('createDomain', 'domain', domain)
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domain, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a domain from the email server
         * @summary Delete a domain
         * @param {string} domain Domain that must be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain: async (domain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('deleteDomain', 'domain', domain)
            const localVarPath = `/domains/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all domains (except domains aliases) that the email server has configured to receive emails
         * @summary Get all email server domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainsApi - functional programming interface
 * @export
 */
export const DomainsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new domain to the email server
         * @summary Add a new domain to the server
         * @param {Domain} domain Create a new domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDomain(domain: Domain, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDomain(domain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a domain from the email server
         * @summary Delete a domain
         * @param {string} domain Domain that must be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomain(domain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomain(domain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all domains (except domains aliases) that the email server has configured to receive emails
         * @summary Get all email server domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomains(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Domain>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomains(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainsApi - factory interface
 * @export
 */
export const DomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainsApiFp(configuration)
    return {
        /**
         * Add a new domain to the email server
         * @summary Add a new domain to the server
         * @param {Domain} domain Create a new domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(domain: Domain, options?: any): AxiosPromise<Domain> {
            return localVarFp.createDomain(domain, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a domain from the email server
         * @summary Delete a domain
         * @param {string} domain Domain that must be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domain: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDomain(domain, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all domains (except domains aliases) that the email server has configured to receive emails
         * @summary Get all email server domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains(options?: any): AxiosPromise<Array<Domain>> {
            return localVarFp.getDomains(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainsApi - object-oriented interface
 * @export
 * @class DomainsApi
 * @extends {BaseAPI}
 */
export class DomainsApi extends BaseAPI {
    /**
     * Add a new domain to the email server
     * @summary Add a new domain to the server
     * @param {Domain} domain Create a new domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public createDomain(domain: Domain, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).createDomain(domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a domain from the email server
     * @summary Delete a domain
     * @param {string} domain Domain that must be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public deleteDomain(domain: string, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).deleteDomain(domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all domains (except domains aliases) that the email server has configured to receive emails
     * @summary Get all email server domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public getDomains(options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).getDomains(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DomainsAliasesApi - axios parameter creator
 * @export
 */
export const DomainsAliasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new domain alias to the email server
         * @summary Adds a new domain alias
         * @param {DomainAlias} domainAlias Create a new domain alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainAlias: async (domainAlias: DomainAlias, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainAlias' is not null or undefined
            assertParamExists('createDomainAlias', 'domainAlias', domainAlias)
            const localVarPath = `/domains-aliases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainAlias, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a domain alias from the email server
         * @summary Deletes a domain alias
         * @param {string} domainAlias Domain alias that must be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainAlias: async (domainAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainAlias' is not null or undefined
            assertParamExists('deleteDomainAlias', 'domainAlias', domainAlias)
            const localVarPath = `/domains-aliases/{domain_alias}`
                .replace(`{${"domain_alias"}}`, encodeURIComponent(String(domainAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of domain aliases registered on the email server. Domain alias is a way of having multiple domains pointing to the same domain. For example, with the domain example.net being an alias for the domain example.com,  any email address with @example.com can also receive email if sent to and address ended with @example.net.
         * @summary List of domain aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainsAliases: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domains-aliases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of domains aliases registered at the server.
         * @summary Get Domains Aliases filtered by Domain
         * @param {string} domain Domain by which you want to filter the list of domain aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainsAliasesByDomain: async (domain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('getDomainsAliasesByDomain', 'domain', domain)
            const localVarPath = `/domains-aliases/filterByDomain/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainsAliasesApi - functional programming interface
 * @export
 */
export const DomainsAliasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainsAliasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new domain alias to the email server
         * @summary Adds a new domain alias
         * @param {DomainAlias} domainAlias Create a new domain alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDomainAlias(domainAlias: DomainAlias, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainAlias>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDomainAlias(domainAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a domain alias from the email server
         * @summary Deletes a domain alias
         * @param {string} domainAlias Domain alias that must be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomainAlias(domainAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomainAlias(domainAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of domain aliases registered on the email server. Domain alias is a way of having multiple domains pointing to the same domain. For example, with the domain example.net being an alias for the domain example.com,  any email address with @example.com can also receive email if sent to and address ended with @example.net.
         * @summary List of domain aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomainsAliases(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainAlias>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomainsAliases(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of domains aliases registered at the server.
         * @summary Get Domains Aliases filtered by Domain
         * @param {string} domain Domain by which you want to filter the list of domain aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomainsAliasesByDomain(domain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainAlias>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomainsAliasesByDomain(domain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainsAliasesApi - factory interface
 * @export
 */
export const DomainsAliasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainsAliasesApiFp(configuration)
    return {
        /**
         * Add a new domain alias to the email server
         * @summary Adds a new domain alias
         * @param {DomainAlias} domainAlias Create a new domain alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainAlias(domainAlias: DomainAlias, options?: any): AxiosPromise<DomainAlias> {
            return localVarFp.createDomainAlias(domainAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a domain alias from the email server
         * @summary Deletes a domain alias
         * @param {string} domainAlias Domain alias that must be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainAlias(domainAlias: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDomainAlias(domainAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of domain aliases registered on the email server. Domain alias is a way of having multiple domains pointing to the same domain. For example, with the domain example.net being an alias for the domain example.com,  any email address with @example.com can also receive email if sent to and address ended with @example.net.
         * @summary List of domain aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainsAliases(options?: any): AxiosPromise<Array<DomainAlias>> {
            return localVarFp.getDomainsAliases(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of domains aliases registered at the server.
         * @summary Get Domains Aliases filtered by Domain
         * @param {string} domain Domain by which you want to filter the list of domain aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainsAliasesByDomain(domain: string, options?: any): AxiosPromise<Array<DomainAlias>> {
            return localVarFp.getDomainsAliasesByDomain(domain, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainsAliasesApi - object-oriented interface
 * @export
 * @class DomainsAliasesApi
 * @extends {BaseAPI}
 */
export class DomainsAliasesApi extends BaseAPI {
    /**
     * Add a new domain alias to the email server
     * @summary Adds a new domain alias
     * @param {DomainAlias} domainAlias Create a new domain alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsAliasesApi
     */
    public createDomainAlias(domainAlias: DomainAlias, options?: AxiosRequestConfig) {
        return DomainsAliasesApiFp(this.configuration).createDomainAlias(domainAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a domain alias from the email server
     * @summary Deletes a domain alias
     * @param {string} domainAlias Domain alias that must be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsAliasesApi
     */
    public deleteDomainAlias(domainAlias: string, options?: AxiosRequestConfig) {
        return DomainsAliasesApiFp(this.configuration).deleteDomainAlias(domainAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of domain aliases registered on the email server. Domain alias is a way of having multiple domains pointing to the same domain. For example, with the domain example.net being an alias for the domain example.com,  any email address with @example.com can also receive email if sent to and address ended with @example.net.
     * @summary List of domain aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsAliasesApi
     */
    public getDomainsAliases(options?: AxiosRequestConfig) {
        return DomainsAliasesApiFp(this.configuration).getDomainsAliases(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of domains aliases registered at the server.
     * @summary Get Domains Aliases filtered by Domain
     * @param {string} domain Domain by which you want to filter the list of domain aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsAliasesApi
     */
    public getDomainsAliasesByDomain(domain: string, options?: AxiosRequestConfig) {
        return DomainsAliasesApiFp(this.configuration).getDomainsAliasesByDomain(domain, options).then((request) => request(this.axios, this.basePath));
    }
}




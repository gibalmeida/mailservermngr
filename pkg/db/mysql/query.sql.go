// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO account 
(name,domain,password,home_dir,quota)
VALUES (?,?,?,?,?)
`

type CreateAccountParams struct {
	Name     string         `json:"name"`
	Domain   string         `json:"domain"`
	Password string         `json:"password"`
	HomeDir  sql.NullString `json:"home_dir"`
	Quota    sql.NullString `json:"quota"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount,
		arg.Name,
		arg.Domain,
		arg.Password,
		arg.HomeDir,
		arg.Quota,
	)
}

const createAddressAlias = `-- name: CreateAddressAlias :execresult
INSERT INTO address_alias 
(alias,addresses)
VALUES (?,?)
`

type CreateAddressAliasParams struct {
	Alias     string         `json:"alias"`
	Addresses sql.NullString `json:"addresses"`
}

func (q *Queries) CreateAddressAlias(ctx context.Context, arg CreateAddressAliasParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAddressAlias, arg.Alias, arg.Addresses)
}

const createDomain = `-- name: CreateDomain :execresult
INSERT INTO domain 
(domain)
VALUES (?)
`

func (q *Queries) CreateDomain(ctx context.Context, domain string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDomain, domain)
}

const createDomainAlias = `-- name: CreateDomainAlias :execresult
INSERT INTO domain_alias 
(alias,domain)
VALUES (?,?)
`

type CreateDomainAliasParams struct {
	Alias  string `json:"alias"`
	Domain string `json:"domain"`
}

func (q *Queries) CreateDomainAlias(ctx context.Context, arg CreateDomainAliasParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDomainAlias, arg.Alias, arg.Domain)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE name = ? AND domain = ?
`

type DeleteAccountParams struct {
	Name   string `json:"name"`
	Domain string `json:"domain"`
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, arg.Name, arg.Domain)
	return err
}

const deleteAddressAlias = `-- name: DeleteAddressAlias :exec
DELETE FROM address_alias
WHERE alias = ?
`

func (q *Queries) DeleteAddressAlias(ctx context.Context, alias string) error {
	_, err := q.db.ExecContext(ctx, deleteAddressAlias, alias)
	return err
}

const deleteDomain = `-- name: DeleteDomain :exec
DELETE FROM domain
WHERE domain = ?
`

func (q *Queries) DeleteDomain(ctx context.Context, domain string) error {
	_, err := q.db.ExecContext(ctx, deleteDomain, domain)
	return err
}

const deleteDomainAlias = `-- name: DeleteDomainAlias :exec
DELETE FROM domain_alias 
WHERE alias = ?
`

func (q *Queries) DeleteDomainAlias(ctx context.Context, alias string) error {
	_, err := q.db.ExecContext(ctx, deleteDomainAlias, alias)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT name, domain, home_dir, quota FROM account 
WHERE name = ? AND domain = ?
LIMIT 1
`

type GetAccountParams struct {
	Name   string `json:"name"`
	Domain string `json:"domain"`
}

type GetAccountRow struct {
	Name    string         `json:"name"`
	Domain  string         `json:"domain"`
	HomeDir sql.NullString `json:"home_dir"`
	Quota   sql.NullString `json:"quota"`
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (GetAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.Name, arg.Domain)
	var i GetAccountRow
	err := row.Scan(
		&i.Name,
		&i.Domain,
		&i.HomeDir,
		&i.Quota,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT name, domain FROM account
ORDER BY domain, name
`

type GetAccountsRow struct {
	Name   string `json:"name"`
	Domain string `json:"domain"`
}

func (q *Queries) GetAccounts(ctx context.Context) ([]GetAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountsRow
	for rows.Next() {
		var i GetAccountsRow
		if err := rows.Scan(&i.Name, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsFilteredByDomain = `-- name: GetAccountsFilteredByDomain :many
SELECT name, domain FROM account
WHERE domain = ? ORDER BY name
`

type GetAccountsFilteredByDomainRow struct {
	Name   string `json:"name"`
	Domain string `json:"domain"`
}

func (q *Queries) GetAccountsFilteredByDomain(ctx context.Context, domain string) ([]GetAccountsFilteredByDomainRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsFilteredByDomain, domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountsFilteredByDomainRow
	for rows.Next() {
		var i GetAccountsFilteredByDomainRow
		if err := rows.Scan(&i.Name, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddressAlias = `-- name: GetAddressAlias :one
SELECT alias, addresses FROM address_alias
WHERE alias = ?
LIMIT 1
`

func (q *Queries) GetAddressAlias(ctx context.Context, alias string) (AddressAlias, error) {
	row := q.db.QueryRowContext(ctx, getAddressAlias, alias)
	var i AddressAlias
	err := row.Scan(&i.Alias, &i.Addresses)
	return i, err
}

const getAddressesAliases = `-- name: GetAddressesAliases :many
SELECT alias, addresses FROM address_alias
ORDER BY alias
`

func (q *Queries) GetAddressesAliases(ctx context.Context) ([]AddressAlias, error) {
	rows, err := q.db.QueryContext(ctx, getAddressesAliases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AddressAlias
	for rows.Next() {
		var i AddressAlias
		if err := rows.Scan(&i.Alias, &i.Addresses); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddressesAliasesFilteredByDomain = `-- name: GetAddressesAliasesFilteredByDomain :many
SELECT alias, addresses FROM address_alias
WHERE alias LIKE ?
ORDER BY alias
`

func (q *Queries) GetAddressesAliasesFilteredByDomain(ctx context.Context, domain string) ([]AddressAlias, error) {
	rows, err := q.db.QueryContext(ctx, getAddressesAliasesFilteredByDomain, domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AddressAlias
	for rows.Next() {
		var i AddressAlias
		if err := rows.Scan(&i.Alias, &i.Addresses); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDomain = `-- name: GetDomain :one
SELECT domain FROM domain
WHERE domain = ?
LIMIT 1
`

func (q *Queries) GetDomain(ctx context.Context, domain string) (string, error) {
	row := q.db.QueryRowContext(ctx, getDomain, domain)
	err := row.Scan(&domain)
	return domain, err
}

const getDomainAlias = `-- name: GetDomainAlias :one
SELECT alias, domain FROM domain_alias 
WHERE alias = ? LIMIT 1
`

func (q *Queries) GetDomainAlias(ctx context.Context, alias string) (DomainAlias, error) {
	row := q.db.QueryRowContext(ctx, getDomainAlias, alias)
	var i DomainAlias
	err := row.Scan(&i.Alias, &i.Domain)
	return i, err
}

const getDomains = `-- name: GetDomains :many
SELECT domain FROM domain
ORDER BY domain
`

func (q *Queries) GetDomains(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDomainsAliases = `-- name: GetDomainsAliases :many
SELECT alias, domain FROM domain_alias
ORDER BY alias
`

func (q *Queries) GetDomainsAliases(ctx context.Context) ([]DomainAlias, error) {
	rows, err := q.db.QueryContext(ctx, getDomainsAliases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DomainAlias
	for rows.Next() {
		var i DomainAlias
		if err := rows.Scan(&i.Alias, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE account 
SET password = ?
WHERE name = ? AND domain = ?
`

type UpdateAccountPasswordParams struct {
	Password string `json:"password"`
	Name     string `json:"name"`
	Domain   string `json:"domain"`
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountPassword, arg.Password, arg.Name, arg.Domain)
	return err
}

const updateAddressAlias = `-- name: UpdateAddressAlias :exec
UPDATE address_alias
SET addresses = ?
WHERE alias = ?
`

type UpdateAddressAliasParams struct {
	Addresses sql.NullString `json:"addresses"`
	Alias     string         `json:"alias"`
}

func (q *Queries) UpdateAddressAlias(ctx context.Context, arg UpdateAddressAliasParams) error {
	_, err := q.db.ExecContext(ctx, updateAddressAlias, arg.Addresses, arg.Alias)
	return err
}

const updateDomainAlias = `-- name: UpdateDomainAlias :exec
UPDATE domain_alias
SET domain = ?
WHERE alias = ?
`

type UpdateDomainAliasParams struct {
	Domain string `json:"domain"`
	Alias  string `json:"alias"`
}

func (q *Queries) UpdateDomainAlias(ctx context.Context, arg UpdateDomainAliasParams) error {
	_, err := q.db.ExecContext(ctx, updateDomainAlias, arg.Domain, arg.Alias)
	return err
}
